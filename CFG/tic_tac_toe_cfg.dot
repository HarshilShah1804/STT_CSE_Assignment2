digraph CFG {
	node [fixedsize=false fontsize=10 height=0.5 shape=box width=3]
	B0 [label="#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 3
// Board cells: ' ' empty, 'X' player1, 'O' player2/AI
void init_board(char board[SIZE][SIZE]) {"]
	B1 [label="for (int i = 0; i < SIZE; ++i)"]
	B2 [label="for (int j = 0; j < SIZE; ++j)"]
	B3 [label="board[i][j] = ' ';
}
void print_board(char board[SIZE][SIZE]) {
printf(\"\n\");"]
	B4 [label="for (int i = 0; i < SIZE; ++i) {"]
	B5 [label="printf(\" \");"]
	B6 [label="for (int j = 0; j < SIZE; ++j) {"]
	B7 [label="printf(\" %c \", board[i][j]);"]
	B8 [label="if (j < SIZE - 1) printf(\"|\");"]
	B9 [label="}"]
	B10 [label="printf(\"\n\");"]
	B11 [label="if (i < SIZE - 1) {"]
	B12 [label="printf(\" ---+---+---\n\");
}"]
	B13 [label="}"]
	B14 [label="printf(\"\n\");
}
int is_full(char board[SIZE][SIZE]) {"]
	B15 [label="for (int i = 0; i < SIZE; ++i)"]
	B16 [label="for (int j = 0; j < SIZE; ++j)"]
	B17 [label="if (board[i][j] == ' ') return 0;"]
	B18 [label="return 1;
}
// Check if someone wins: return 'X' or 'O' or ' ' if none
char check_winner(char board[SIZE][SIZE]) {
// rows and columns"]
	B19 [label="for (int i = 0; i < SIZE; ++i) {"]
	B20 [label="if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {"]
	B21 [label="return board[i][0];
}"]
	B22 [label="if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {"]
	B23 [label="return board[0][i];
}"]
	B24 [label="}"]
	B25 [label="// diagonals"]
	B26 [label="if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {"]
	B27 [label="return board[0][0];
}"]
	B28 [label="if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {"]
	B29 [label="return board[0][2];
}"]
	B30 [label="return ' ';
}
// Minimax for AI: returns score from perspective of maximizer ('O')
int minimax(char board[SIZE][SIZE], int depth, int isMax) {
char winner = check_winner(board);"]
	B31 [label="if (winner == 'O') return 10 - depth;   // prefer faster wins"]
	B32 [label="if (winner == 'X') return depth - 10;   // prefer slower losses"]
	B33 [label="if (is_full(board)) return 0;"]
	B34 [label="if (isMax) {"]
	B35 [label="int best = -1000;"]
	B36 [label="for (int i = 0; i < SIZE; ++i) {"]
	B37 [label="for (int j = 0; j < SIZE; ++j) {"]
	B38 [label="if (board[i][j] == ' ') {"]
	B39 [label="board[i][j] = 'O';
int val = minimax(board, depth + 1, 0);
board[i][j] = ' ';"]
	B40 [label="if (val > best) best = val;"]
	B41 [label="}"]
	B42 [label="}"]
	B43 [label="}"]
	B44 [label="return best;
} else {
int best = 1000;"]
	B45 [label="for (int i = 0; i < SIZE; ++i) {"]
	B46 [label="for (int j = 0; j < SIZE; ++j) {"]
	B47 [label="if (board[i][j] == ' ') {"]
	B48 [label="board[i][j] = 'X';
int val = minimax(board, depth + 1, 1);
board[i][j] = ' ';"]
	B49 [label="if (val < best) best = val;"]
	B50 [label="}"]
	B51 [label="}"]
	B52 [label="}"]
	B53 [label="return best;
}"]
	B54 [label="}
// AI move using minimax (perfect play). Chooses first best move.
void ai_move(char board[SIZE][SIZE]) {
int bestVal = -1000;
int bestMoveRow = -1, bestMoveCol = -1;"]
	B55 [label="for (int i = 0; i < SIZE; ++i) {"]
	B56 [label="for (int j = 0; j < SIZE; ++j) {"]
	B57 [label="if (board[i][j] == ' ') {"]
	B58 [label="board[i][j] = 'O';
int moveVal = minimax(board, 0, 0);
board[i][j] = ' ';"]
	B59 [label="if (moveVal > bestVal) {"]
	B60 [label="bestMoveRow = i; bestMoveCol = j;
bestVal = moveVal;
}"]
	B61 [label="}"]
	B62 [label="}"]
	B63 [label="}"]
	B64 [label="if (bestMoveRow != -1) {"]
	B65 [label="board[bestMoveRow][bestMoveCol] = 'O';
printf(\"AI places O at %d %d\n\", bestMoveRow + 1, bestMoveCol + 1);
} else {
// fallback: random
int r, c;
do { r = rand() % SIZE; c = rand() % SIZE; } while (board[r][c] != ' ');
board[r][c] = 'O';
printf(\"AI (random) places O at %d %d\n\", r + 1, c + 1);
}"]
	B66 [label="}
// Human move: prompt for row,col (1..3)
void human_move(char board[SIZE][SIZE], char symbol) {
int r, c;"]
	B67 [label="while (1) {"]
	B68 [label="printf(\"Player %c, enter row and column (1-%d 1-%d): \", symbol, SIZE, SIZE);"]
	B69 [label="if (scanf(\"%d %d\", &r, &c) != 2) {"]
	B70 [label="while (getchar() != '\n'); // flush"]
	B71 [label="printf(\"Invalid input. Enter two numbers.\n\");
continue;
}"]
	B72 [label="if (r < 1 || r > SIZE || c < 1 || c > SIZE) {"]
	B73 [label="printf(\"Out of range. Try again.\n\");
continue;
}"]
	B74 [label="r--; c--;"]
	B75 [label="if (board[r][c] != ' ') {"]
	B76 [label="printf(\"Cell already occupied. Pick another.\n\");
continue;
}"]
	B77 [label="board[r][c] = symbol;
break;
}"]
	B78 [label="}
// Menu and game loop
void play_game(int vs_ai) {
char board[SIZE][SIZE];
int current_player = 1; // 1 -> X, 2 -> O
int rounds = 0;
int scoreX = 0, scoreO = 0, ties = 0;"]
	B79 [label="while (1) {"]
	B80 [label="init_board(board);
rounds++;
printf(\"\n=== Round %d ===\n\", rounds);
print_board(board);"]
	B81 [label="while (1) {"]
	B82 [label="if (current_player == 1) {"]
	B83 [label="human_move(board, 'X');
} else {"]
	B84 [label="if (vs_ai) {"]
	B85 [label="ai_move(board);
} else {
human_move(board, 'O');
}"]
	B86 [label="}"]
	B87 [label="print_board(board);
char winner = check_winner(board);"]
	B88 [label="if (winner == 'X') {"]
	B89 [label="printf(\"Player X wins this round!\n\");
scoreX++;
break;
} else if (winner == 'O') {
printf(\"Player O wins this round!\n\");
scoreO++;
break;
} else if (is_full(board)) {
printf(\"This round is a tie.\n\");
ties++;
break;
}"]
	B90 [label="current_player = 3 - current_player; // toggle 1<->2
}"]
	B91 [label="printf(\"Scoreboard: X=%d, O=%d, Ties=%d\n\", scoreX, scoreO, ties);
// Ask user for next action
int choice = 0;"]
	B92 [label="while (1) {"]
	B93 [label="printf(\"\nOptions:\n\");
printf(\" 1 - Play another round\n\");
printf(\" 2 - Reset scores and play again\n\");
printf(\" 3 - Exit to main menu\n\");
printf(\"Enter choice: \");"]
	B94 [label="if (scanf(\"%d\", &choice) != 1) {"]
	B95 [label="while (getchar() != '\n');"]
	B96 [label="printf(\"Invalid input.\n\");
continue;
}"]
	B97 [label="if (choice < 1 || choice > 3) {"]
	B98 [label="printf(\"Invalid choice.\n\");
continue;
}"]
	B99 [label="break;
}"]
	B100 [label="if (choice == 1) {"]
	B101 [label="current_player = (rounds % 2) ? 2 : 1; // alternate who starts
continue;
} else if (choice == 2) {
scoreX = scoreO = ties = 0;
rounds = 0;
current_player = 1;
printf(\"Scores reset.\n\");
continue;
} else {
break;
}"]
	B102 [label="}"]
	B103 [label="}
// Small help/controls print
void print_help() {
printf(\"\nTic-Tac-Toe Help:\n\");
printf(\"- Board coordinates are row and column numbers 1 through 3.\n\");
printf(\"- Player X always plays first by default.\n\");
printf(\"- In Human vs AI mode, AI plays O and uses perfect play.\n\n\");
}
int main() {
srand((unsigned int)time(NULL));
int mode = 0;"]
	B104 [label="while (1) {"]
	B105 [label="printf(\"\n==== TIC-TAC-TOE ====\n\");
printf(\"Select mode:\n\");
printf(\" 1 - Human vs Human\n\");
printf(\" 2 - Human vs AI\n\");
printf(\" 3 - Help\n\");
printf(\" 4 - Exit\n\");
printf(\"Enter choice: \");"]
	B106 [label="if (scanf(\"%d\", &mode) != 1) {"]
	B107 [label="while (getchar() != '\n');"]
	B108 [label="printf(\"Invalid input.\n\");
continue;
}"]
	B109 [label="if (mode == 1) {"]
	B110 [label="play_game(0);
} else if (mode == 2) {
play_game(1);
} else if (mode == 3) {
print_help();
} else if (mode == 4) {
printf(\"Goodbye!\n\");
break;
} else {
printf(\"Invalid choice. Try again.\n\");
}"]
	B111 [label="}"]
	B112 [label="return 0;
}"]
	B0 -> B1 [label=""]
	B1 -> B2 [label=T]
	B1 -> B2 [label=""]
	B2 -> B1 [label=""]
	B2 -> B3 [label=T]
	B2 -> B3 [label=""]
	B3 -> B2 [label=""]
	B3 -> B4 [label=""]
	B4 -> B5 [label=T]
	B4 -> B14 [label=""]
	B14 -> B4 [label=""]
	B5 -> B6 [label=""]
	B6 -> B7 [label=T]
	B6 -> B10 [label=""]
	B10 -> B6 [label=""]
	B7 -> B8 [label=""]
	B8 -> B9 [label=T]
	B9 -> B10 [label=""]
	B10 -> B11 [label=""]
	B11 -> B12 [label=T]
	B11 -> B13 [label=F]
	B12 -> B13 [label=""]
	B13 -> B14 [label=""]
	B14 -> B15 [label=""]
	B15 -> B16 [label=T]
	B15 -> B16 [label=""]
	B16 -> B15 [label=""]
	B16 -> B17 [label=T]
	B16 -> B17 [label=""]
	B17 -> B16 [label=""]
	B17 -> B18 [label=T]
	B18 -> B19 [label=""]
	B19 -> B20 [label=T]
	B19 -> B25 [label=""]
	B25 -> B19 [label=""]
	B20 -> B21 [label=T]
	B20 -> B22 [label=F]
	B21 -> B22 [label=""]
	B22 -> B23 [label=T]
	B22 -> B24 [label=F]
	B23 -> B24 [label=""]
	B24 -> B25 [label=""]
	B25 -> B26 [label=""]
	B26 -> B27 [label=T]
	B26 -> B28 [label=F]
	B27 -> B28 [label=""]
	B28 -> B29 [label=T]
	B28 -> B30 [label=F]
	B29 -> B30 [label=""]
	B30 -> B31 [label=""]
	B31 -> B32 [label=T]
	B32 -> B33 [label=T]
	B33 -> B34 [label=T]
	B34 -> B35 [label=T]
	B34 -> B54 [label=F]
	B35 -> B36 [label=""]
	B36 -> B37 [label=T]
	B36 -> B44 [label=""]
	B44 -> B36 [label=""]
	B37 -> B38 [label=T]
	B37 -> B43 [label=""]
	B43 -> B37 [label=""]
	B38 -> B39 [label=T]
	B38 -> B42 [label=F]
	B39 -> B40 [label=""]
	B40 -> B41 [label=T]
	B41 -> B42 [label=""]
	B42 -> B43 [label=""]
	B43 -> B44 [label=""]
	B44 -> B45 [label=""]
	B45 -> B46 [label=T]
	B45 -> B53 [label=""]
	B53 -> B45 [label=""]
	B46 -> B47 [label=T]
	B46 -> B52 [label=""]
	B52 -> B46 [label=""]
	B47 -> B48 [label=T]
	B47 -> B51 [label=F]
	B48 -> B49 [label=""]
	B49 -> B50 [label=T]
	B50 -> B51 [label=""]
	B51 -> B52 [label=""]
	B52 -> B53 [label=""]
	B53 -> B54 [label=""]
	B54 -> B55 [label=""]
	B55 -> B56 [label=T]
	B55 -> B64 [label=""]
	B64 -> B55 [label=""]
	B56 -> B57 [label=T]
	B56 -> B63 [label=""]
	B63 -> B56 [label=""]
	B57 -> B58 [label=T]
	B57 -> B62 [label=F]
	B58 -> B59 [label=""]
	B59 -> B60 [label=T]
	B59 -> B61 [label=F]
	B60 -> B61 [label=""]
	B61 -> B62 [label=""]
	B62 -> B63 [label=""]
	B63 -> B64 [label=""]
	B64 -> B65 [label=T]
	B64 -> B66 [label=F]
	B65 -> B66 [label=""]
	B66 -> B67 [label=""]
	B67 -> B68 [label=T]
	B67 -> B78 [label=""]
	B78 -> B67 [label=""]
	B68 -> B69 [label=""]
	B69 -> B70 [label=T]
	B69 -> B72 [label=F]
	B70 -> B71 [label=T]
	B70 -> B71 [label=""]
	B71 -> B70 [label=""]
	B71 -> B72 [label=""]
	B72 -> B73 [label=T]
	B72 -> B74 [label=F]
	B73 -> B74 [label=""]
	B74 -> B75 [label=""]
	B75 -> B76 [label=T]
	B75 -> B77 [label=F]
	B76 -> B77 [label=""]
	B77 -> B78 [label=""]
	B78 -> B79 [label=""]
	B79 -> B80 [label=T]
	B79 -> B103 [label=""]
	B103 -> B79 [label=""]
	B80 -> B81 [label=""]
	B81 -> B82 [label=T]
	B81 -> B91 [label=""]
	B91 -> B81 [label=""]
	B82 -> B83 [label=T]
	B82 -> B87 [label=F]
	B83 -> B84 [label=""]
	B84 -> B85 [label=T]
	B84 -> B86 [label=F]
	B85 -> B86 [label=""]
	B86 -> B87 [label=""]
	B87 -> B88 [label=""]
	B88 -> B89 [label=T]
	B88 -> B90 [label=F]
	B89 -> B90 [label=""]
	B90 -> B91 [label=""]
	B91 -> B92 [label=""]
	B92 -> B93 [label=T]
	B92 -> B100 [label=""]
	B100 -> B92 [label=""]
	B93 -> B94 [label=""]
	B94 -> B95 [label=T]
	B94 -> B97 [label=F]
	B95 -> B96 [label=T]
	B95 -> B96 [label=""]
	B96 -> B95 [label=""]
	B96 -> B97 [label=""]
	B97 -> B98 [label=T]
	B97 -> B99 [label=F]
	B98 -> B99 [label=""]
	B99 -> B100 [label=""]
	B100 -> B101 [label=T]
	B100 -> B102 [label=F]
	B101 -> B102 [label=""]
	B102 -> B103 [label=""]
	B103 -> B104 [label=""]
	B104 -> B105 [label=T]
	B104 -> B112 [label=""]
	B112 -> B104 [label=""]
	B105 -> B106 [label=""]
	B106 -> B107 [label=T]
	B106 -> B109 [label=F]
	B107 -> B108 [label=T]
	B107 -> B108 [label=""]
	B108 -> B107 [label=""]
	B108 -> B109 [label=""]
	B109 -> B110 [label=T]
	B109 -> B111 [label=F]
	B110 -> B111 [label=""]
	B111 -> B112 [label=""]
}
