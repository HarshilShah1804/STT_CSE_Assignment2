digraph CFG {
	node [fixedsize=false fontsize=10 height=0.5 shape=box width=3]
	B0 [label="int main() {
int data[100];
int n = 30;
int choice, i, j, temp;
double mean = 0.0, variance = 0.0, stddev = 0.0;
int minVal, maxVal;
int key, found;
srand(10);"]
	B1 [label="for (i = 0; i < n; i++) {"]
	B2 [label="data[i] = rand() % 100;
}"]
	B3 [label="while (1) {"]
	B4 [label="printf(\"\n=== DATA ANALYSIS TOOL ===\n\");
printf(\"1. Display Data\n\");
printf(\"2. Compute Mean, Variance, Std Dev\n\");
printf(\"3. Find Min and Max\n\");
printf(\"4. Sort Data (Bubble Sort)\n\");
printf(\"5. Sort Data (Insertion Sort)\n\");
printf(\"6. Linear Search\n\");
printf(\"7. Binary Search (on sorted data)\n\");
printf(\"8. Filter Values (Above Threshold)\n\");
printf(\"9. Replace Negative Values\n\");
printf(\"10. Shuffle Data\n\");
printf(\"11. Generate New Data\n\");
printf(\"12. Check if Data is Increasing/Decreasing\n\");
printf(\"13. Check if Data is Constant\n\");
printf(\"14. Exit\n\");
printf(\"Enter choice: \");
scanf(\"%d\", &choice);"]
	B5 [label="if (choice == 1) {"]
	B6 [label="printf(\"Data: \");"]
	B7 [label="for (i = 0; i < n; i++) {"]
	B8 [label="printf(\"%d \", data[i]);
}"]
	B9 [label="printf(\"\n\");
}"]
	B10 [label="else if (choice == 2) {"]
	B11 [label="mean = 0.0;"]
	B12 [label="for (i = 0; i < n; i++) {"]
	B13 [label="mean += data[i];
}"]
	B14 [label="mean /= n;
variance = 0.0;"]
	B15 [label="for (i = 0; i < n; i++) {"]
	B16 [label="variance += (data[i] - mean) * (data[i] - mean);
}"]
	B17 [label="variance /= n;
stddev = sqrt(variance);
printf(\"Mean: %.2f, Variance: %.2f, Std Dev: %.2f\n\", mean, variance, stddev);
}
else if (choice == 3) {"]
	B18 [label="minVal = data[0];
maxVal = data[0];"]
	B19 [label="for (i = 1; i < n; i++) {"]
	B20 [label="if (data[i] < minVal)"]
	B21 [label="minVal = data[i];
else if (data[i] > maxVal)"]
	B22 [label="maxVal = data[i];
}"]
	B23 [label="printf(\"Min: %d, Max: %d\n\", minVal, maxVal);
}
else if (choice == 4) {"]
	B24 [label="for (i = 0; i < n - 1; i++) {"]
	B25 [label="for (j = 0; j < n - i - 1; j++) {"]
	B26 [label="if (data[j] > data[j + 1]) {"]
	B27 [label="temp = data[j];
data[j] = data[j + 1];
data[j + 1] = temp;
}"]
	B28 [label="}"]
	B29 [label="}"]
	B30 [label="printf(\"Data sorted using Bubble Sort.\n\");
}
else if (choice == 5) {"]
	B31 [label="for (i = 1; i < n; i++) {"]
	B32 [label="temp = data[i];
j = i - 1;"]
	B33 [label="while (j >= 0 && data[j] > temp) {"]
	B34 [label="data[j + 1] = data[j];
j--;
}"]
	B35 [label="data[j + 1] = temp;
}"]
	B36 [label="printf(\"Data sorted using Insertion Sort.\n\");
}
else if (choice == 6) {"]
	B37 [label="printf(\"Enter value to search: \");
scanf(\"%d\", &key);
found = 0;"]
	B38 [label="for (i = 0; i < n; i++) {"]
	B39 [label="if (data[i] == key) {"]
	B40 [label="printf(\"Value found at index %d\n\", i);
found = 1;
break;
}"]
	B41 [label="}"]
	B42 [label="if (!found)"]
	B43 [label="printf(\"Value not found.\n\");
}
else if (choice == 7) {"]
	B44 [label="printf(\"Enter value to search: \");
scanf(\"%d\", &key);
int low = 0, high = n - 1, mid;
found = 0;"]
	B45 [label="while (low <= high) {"]
	B46 [label="mid = (low + high) / 2;"]
	B47 [label="if (data[mid] == key) {"]
	B48 [label="printf(\"Value found at index %d\n\", mid);
found = 1;
break;
} else if (data[mid] < key) {
low = mid + 1;
} else {
high = mid - 1;
}"]
	B49 [label="}"]
	B50 [label="if (!found)"]
	B51 [label="printf(\"Value not found.\n\");
}
else if (choice == 8) {"]
	B52 [label="int threshold;
printf(\"Enter threshold: \");
scanf(\"%d\", &threshold);
printf(\"Values above %d: \", threshold);"]
	B53 [label="for (i = 0; i < n; i++) {"]
	B54 [label="if (data[i] > threshold)"]
	B55 [label="printf(\"%d \", data[i]);
}"]
	B56 [label="printf(\"\n\");
}
else if (choice == 9) {"]
	B57 [label="int replaced = 0;"]
	B58 [label="for (i = 0; i < n; i++) {"]
	B59 [label="if (data[i] < 0) {"]
	B60 [label="data[i] = abs(data[i]);
replaced++;
}"]
	B61 [label="}"]
	B62 [label="printf(\"Replaced %d negative values.\n\", replaced);
}
else if (choice == 10) {"]
	B63 [label="for (i = 0; i < n; i++) {"]
	B64 [label="int r = rand() % n;
temp = data[i];
data[i] = data[r];
data[r] = temp;
}"]
	B65 [label="printf(\"Data shuffled.\n\");
}
else if (choice == 11) {"]
	B66 [label="printf(\"Enter new size (<=100): \");
scanf(\"%d\", &n);"]
	B67 [label="if (n <= 0 || n > 100) {"]
	B68 [label="printf(\"Invalid size.\n\");
n = 30;
}"]
	B69 [label="for (i = 0; i < n; i++) {"]
	B70 [label="data[i] = rand() % 200 - 100;
}"]
	B71 [label="printf(\"New data generated.\n\");
}
else if (choice == 12) {"]
	B72 [label="int increasing = 1, decreasing = 1;"]
	B73 [label="for (i = 1; i < n; i++) {"]
	B74 [label="if (data[i] > data[i - 1])"]
	B75 [label="decreasing = 0;
else if (data[i] < data[i - 1])"]
	B76 [label="increasing = 0;
}"]
	B77 [label="if (increasing)"]
	B78 [label="printf(\"Data is sorted in increasing order.\n\");
else if (decreasing)"]
	B79 [label="printf(\"Data is sorted in decreasing order.\n\");
else"]
	B80 [label="printf(\"Data is unsorted.\n\");
}
else if (choice == 13) {"]
	B81 [label="int constant = 1;"]
	B82 [label="for (i = 1; i < n; i++) {"]
	B83 [label="if (data[i] != data[i - 1]) {"]
	B84 [label="constant = 0;
break;
}"]
	B85 [label="}"]
	B86 [label="if (constant)"]
	B87 [label="printf(\"All data values are constant.\n\");
else"]
	B88 [label="printf(\"Data values are not constant.\n\");
}
else if (choice == 14) {"]
	B89 [label="printf(\"Exiting program.\n\");
break;
}
else {"]
	B90 [label="printf(\"Invalid choice! Try again.\n\");
}"]
	B91 [label="if (n > 50) {"]
	B92 [label="printf(\"Warning: Large dataset, computations may slow down.\n\");
} else if (n < 10) {
printf(\"Dataset is too small for statistical analysis.\n\");
}"]
	B93 [label="int sanity = 1;"]
	B94 [label="for (i = 0; i < n; i++) {"]
	B95 [label="if (data[i] > 1000 || data[i] < -1000) {"]
	B96 [label="sanity = 0;
break;
}"]
	B97 [label="}"]
	B98 [label="if (!sanity)"]
	B99 [label="printf(\"Sanity check failed: extreme values found!\n\");
}"]
	B100 [label="printf(\"Final dataset:\n\");"]
	B101 [label="for (i = 0; i < n; i++) {"]
	B102 [label="printf(\"%d \", data[i]);"]
	B103 [label="if ((i + 1) % 10 == 0)"]
	B104 [label="printf(\"\n\");
}"]
	B105 [label="printf(\"\nProgram terminated successfully.\n\");
return 0;
}"]
	B0 -> B1 [label=""]
	B1 -> B2 [label=T]
	B1 -> B3 [label=""]
	B3 -> B1 [label=""]
	B2 -> B3 [label=""]
	B3 -> B4 [label=T]
	B3 -> B100 [label=""]
	B100 -> B3 [label=""]
	B4 -> B5 [label=""]
	B5 -> B6 [label=T]
	B5 -> B10 [label=F]
	B6 -> B7 [label=""]
	B7 -> B8 [label=T]
	B7 -> B9 [label=""]
	B9 -> B7 [label=""]
	B8 -> B9 [label=""]
	B9 -> B10 [label=""]
	B10 -> B11 [label=""]
	B11 -> B12 [label=""]
	B12 -> B13 [label=T]
	B12 -> B14 [label=""]
	B14 -> B12 [label=""]
	B13 -> B14 [label=""]
	B14 -> B15 [label=""]
	B15 -> B16 [label=T]
	B15 -> B17 [label=""]
	B17 -> B15 [label=""]
	B16 -> B17 [label=""]
	B17 -> B18 [label=""]
	B18 -> B19 [label=""]
	B19 -> B20 [label=T]
	B19 -> B23 [label=""]
	B23 -> B19 [label=""]
	B20 -> B21 [label=T]
	B21 -> B22 [label=""]
	B22 -> B23 [label=""]
	B23 -> B24 [label=""]
	B24 -> B25 [label=T]
	B24 -> B30 [label=""]
	B30 -> B24 [label=""]
	B25 -> B26 [label=T]
	B25 -> B29 [label=""]
	B29 -> B25 [label=""]
	B26 -> B27 [label=T]
	B26 -> B28 [label=F]
	B27 -> B28 [label=""]
	B28 -> B29 [label=""]
	B29 -> B30 [label=""]
	B30 -> B31 [label=""]
	B31 -> B32 [label=T]
	B31 -> B36 [label=""]
	B36 -> B31 [label=""]
	B32 -> B33 [label=""]
	B33 -> B34 [label=T]
	B33 -> B35 [label=""]
	B35 -> B33 [label=""]
	B34 -> B35 [label=""]
	B35 -> B36 [label=""]
	B36 -> B37 [label=""]
	B37 -> B38 [label=""]
	B38 -> B39 [label=T]
	B38 -> B42 [label=""]
	B42 -> B38 [label=""]
	B39 -> B40 [label=T]
	B39 -> B41 [label=F]
	B40 -> B41 [label=""]
	B41 -> B42 [label=""]
	B42 -> B43 [label=T]
	B43 -> B44 [label=""]
	B44 -> B45 [label=""]
	B45 -> B46 [label=T]
	B45 -> B50 [label=""]
	B50 -> B45 [label=""]
	B46 -> B47 [label=""]
	B47 -> B48 [label=T]
	B47 -> B49 [label=F]
	B48 -> B49 [label=""]
	B49 -> B50 [label=""]
	B50 -> B51 [label=T]
	B51 -> B52 [label=""]
	B52 -> B53 [label=""]
	B53 -> B54 [label=T]
	B53 -> B56 [label=""]
	B56 -> B53 [label=""]
	B54 -> B55 [label=T]
	B55 -> B56 [label=""]
	B56 -> B57 [label=""]
	B57 -> B58 [label=""]
	B58 -> B59 [label=T]
	B58 -> B62 [label=""]
	B62 -> B58 [label=""]
	B59 -> B60 [label=T]
	B59 -> B61 [label=F]
	B60 -> B61 [label=""]
	B61 -> B62 [label=""]
	B62 -> B63 [label=""]
	B63 -> B64 [label=T]
	B63 -> B65 [label=""]
	B65 -> B63 [label=""]
	B64 -> B65 [label=""]
	B65 -> B66 [label=""]
	B66 -> B67 [label=""]
	B67 -> B68 [label=T]
	B67 -> B69 [label=F]
	B68 -> B69 [label=""]
	B69 -> B70 [label=T]
	B69 -> B71 [label=""]
	B71 -> B69 [label=""]
	B70 -> B71 [label=""]
	B71 -> B72 [label=""]
	B72 -> B73 [label=""]
	B73 -> B74 [label=T]
	B73 -> B77 [label=""]
	B77 -> B73 [label=""]
	B74 -> B75 [label=T]
	B75 -> B76 [label=""]
	B76 -> B77 [label=""]
	B77 -> B78 [label=T]
	B78 -> B79 [label=""]
	B79 -> B80 [label=""]
	B80 -> B81 [label=""]
	B81 -> B82 [label=""]
	B82 -> B83 [label=T]
	B82 -> B86 [label=""]
	B86 -> B82 [label=""]
	B83 -> B84 [label=T]
	B83 -> B85 [label=F]
	B84 -> B85 [label=""]
	B85 -> B86 [label=""]
	B86 -> B87 [label=T]
	B87 -> B88 [label=""]
	B88 -> B89 [label=""]
	B89 -> B90 [label=""]
	B90 -> B91 [label=""]
	B91 -> B92 [label=T]
	B91 -> B93 [label=F]
	B92 -> B93 [label=""]
	B93 -> B94 [label=""]
	B94 -> B95 [label=T]
	B94 -> B98 [label=""]
	B98 -> B94 [label=""]
	B95 -> B96 [label=T]
	B95 -> B97 [label=F]
	B96 -> B97 [label=""]
	B97 -> B98 [label=""]
	B98 -> B99 [label=T]
	B99 -> B100 [label=""]
	B100 -> B101 [label=""]
	B101 -> B102 [label=T]
	B101 -> B105 [label=""]
	B105 -> B101 [label=""]
	B102 -> B103 [label=""]
	B103 -> B104 [label=T]
	B104 -> B105 [label=""]
}
